name: Backend CI (Build, Test & Analyze)

on:
  push:
    branches: ["main"]
    paths:
      - "src/eMechanic.Backend/**"
      - ".github/workflows/backend-ci.yml"

  pull_request:
    branches: ["main"]
    paths:
      - "src/eMechanic.Backend/**"
      - ".github/workflows/backend-ci.yml"

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Restore dependencies
        run: dotnet restore src/eMechanic.Backend/eMechanic.sln

      - name: Build
        run: dotnet build src/eMechanic.Backend/eMechanic.sln --no-restore --configuration Release

      - name: Test
        run: |
          dotnet test src/eMechanic.Backend/eMechanic.sln \
            --no-build --verbosity normal --configuration Release \
            --logger "trx;LogFileName=test-results.trx" \
            --collect:"XPlat Code Coverage"

      - name: Upload Test Results Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/TestResults/*.trx
            **/TestResults/**/coverage.cobertura.xml
          retention-days: 1

  sonar-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: build-and-test 
    continue-on-error: true 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Download Test Results Artifact
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: TestArtifacts

      - name: SonarScanner Begin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_BASE_REF: ${{ github.event.pull_request.base.ref }}
          PR_HEAD_REF: ${{ github.event.pull_request.head.ref }}
          REPO_NAME: ${{ github.repository }}
        shell: bash
        run: |
          SONAR_CMD="./.sonar/scanner/dotnet-sonarscanner begin /k:\"solowiejmaciej_eMechanic\" /o:\"solowiejmaciej\""
          SONAR_CMD="$SONAR_CMD /d:sonar.token=\"${SONAR_TOKEN}\""
          SONAR_CMD="$SONAR_CMD /d:sonar.host.url=\"https://sonarcloud.io\""
          SONAR_CMD="$SONAR_CMD /d:sonar.cs.vstest.reportsPaths=\"TestArtifacts/**/test-results.trx\""
          SONAR_CMD="$SONAR_CMD /d:sonar.cs.cobertura.reportsPaths=\"TestArtifacts/**/coverage.cobertura.xml\""
          SONAR_CMD="$SONAR_CMD /d:sonar.verbose=\"true\""

          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            echo "Pull Request event detected. Adding PR analysis parameters."
            SONAR_CMD="$SONAR_CMD /d:sonar.pullrequest.provider=\"github\""
            SONAR_CMD="$SONAR_CMD /d:sonar.pullrequest.github.repository=\"${REPO_NAME}\""
            SONAR_CMD="$SONAR_CMD /d:sonar.pullrequest.key=\"${PR_NUMBER}\""
            SONAR_CMD="$SONAR_CMD /d:sonar.pullrequest.base=\"${PR_BASE_REF}\""
            SONAR_CMD="$SONAR_CMD /d:sonar.pullrequest.branch=\"${PR_HEAD_REF}\""
          else
            echo "Push event detected (e.g., merge to main). Skipping PR analysis parameters."
          fi

          echo "Executing SonarScanner..."
          eval $SONAR_CMD

      - name: Restore dependencies
        run: dotnet restore src/eMechanic.Backend/eMechanic.sln
              
      - name: Build
        run: dotnet build src/eMechanic.Backend/eMechanic.sln --no-restore --configuration Release

      - name: SonarScanner End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
